---
import { Image } from 'astro:assets'
import BaseLayout from '~/layouts/BaseLayout.astro'
import '@fancyapps/ui/dist/fancybox/fancybox.css'
import { getCollection } from 'astro:content'

const images = import.meta.glob<{ default: ImageMetadata }>(
    '../content/imgs/*.{jpg,jpeg,png,webp}'
)

const mds = await getCollection('haikus')

const mdLookup = Object.fromEntries(
    mds.map((md) => {
        const fileName = md.filePath
            ?.split('/')
            .pop()
            ?.replace('.md', '') // Get filename without extension
        return [
            fileName,
            md.rendered?.html
                .replaceAll('"', "'")
                .replaceAll('—', '<br>—')
                .replace(
                    /\|\|(.+)\|\|/,
                    (_, group) =>
                        `<details><summary>rōmanji</summary>${group}</details>`
                ),
        ]
    })
)
---

<BaseLayout
    title='Astro Photo Grid'
    description='A minimal, single-page photo gallery for Astro.'
>
    <section
        class='justified-gallery'
        id='photoswipe'
    >
        {
            Object.entries(images)
                .toSorted(([pathA], [pathB]) =>
                    pathA.localeCompare(pathB)
                )
                .map(async ([path, image], index) => {
                    const { default: imageData } =
                        await image()
                    // Extract image filename without extension
                    const imageFileName =
                        path
                            .split('/')
                            .pop()
                            ?.replace(
                                /\.(jpg|jpeg|png|webp)$/,
                                ''
                            ) || ''

                    // Find matching markdown file
                    const matchingMd = imageFileName
                        ? mdLookup[imageFileName]
                        : null

                    return (
                        <a
                            style={`--width: ${imageData.width}; --height: ${imageData.height};`}
                            href={imageData.src}
                            data-caption={matchingMd}
                            target='_blank'
                            data-fancybox='gallery'
                        >
                            <Image
                                format='webp'
                                src={imageData}
                                alt=''
                                height={800}
                                loading={
                                    index < 20
                                        ? 'eager'
                                        : 'lazy'
                                }
                            />
                        </a>
                    )
                })
        }
    </section>
</BaseLayout>

<script>
    import { Fancybox } from '@fancyapps/ui/dist/fancybox/'

    Fancybox.bind('[data-fancybox]', {
        theme: 'auto',
        mainStyle: {
            '--f-button-width': '44px',
            '--f-button-height': '44px',
            '--f-button-border-radius': '50%',
            '--f-toolbar-padding': '16px',
        },
        Carousel: {
            Arrows: false,
            Toolbar: {
                display: {
                    left: ['autoplay'],
                    middle: [],
                    right: ['close'],
                },
            },
            Autoplay: {
                timeout: 6000,
            },
            transition: 'crossfade',
        },
    })
</script>

<style>
    .justified-gallery {
        --padding: max(2.5vw, 12px);
        --space: max(2.5vw, 12px);
        --min-height: clamp(300px, 20vw, 600px);

        padding: var(--padding);
        display: flex;
        flex-wrap: wrap;
        gap: var(--space);

        a {
            flex-grow: calc(
                var(--width) * (100000 / var(--height))
            );
            flex-basis: calc(
                var(--min-height) *
                    (var(--width) / var(--height))
            );
            aspect-ratio: var(--width) / var(--height);
            overflow: hidden;
            opacity: 1;
            transition: all 0.05s ease-in-out;
        }

        a img {
            display: block;
            object-fit: cover;
            height: 100%;
            width: 100%;
        }

        a:focus-visible {
            outline: 3px solid var(--outline);
            outline-offset: 2px;
            transform: scale(1.05);
            z-index: 1;
            border-radius: 2px;
            box-shadow: 0 2px 4px 2px rgba(0, 0, 0, 0.1);
        }

        a.hidden {
            transition: opacity 0.4s ease-in-out;
            opacity: 0;
        }

        &::after {
            content: ' ';
            flex-grow: 1000000000;
        }
    }
</style>
